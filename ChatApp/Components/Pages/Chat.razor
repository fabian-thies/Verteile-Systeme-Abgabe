@page "/"
@rendermode InteractiveServer
@using ChatApp.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using ChatApp.Components.Chat
@using ChatApp.Data

<div class="chat-container h-screen flex flex-col">
    <div class="flex-grow">
        <div class="flex items-center gap-4 p-4">
            <img class="w-8 h-8 rounded-full" src="https://placehold.co/600x600" alt="Profile Picture"/>
            <h1>
                <span class="text-xl font-semibold text-gray-900 dark:text-white">@userName</span>
            </h1>
        </div>
        <hr class="border-gray-600">
    </div>
    <div class="messages space-y-5 overflow-y-scroll px-10" @ref="messagesContainer">
        @foreach (var message in messages)
        {
            <ChatMessage Username="@message.User.Username" Message="@message.Text" Timestamp="@message.Timestamp"/>
        }
    </div>
    <div class="flex gap-6 w-full p-4">
        <input @bind="messageInput" @bind:event="oninput" @onkeypress="HandleKeyPress" type="text"
               placeholder="Nachricht an xxx"
               class="block mt-2 w-full placeholder-gray-400/70 dark:placeholder-gray-500 rounded-lg border border-gray-200 bg-white px-5 py-2.5 text-gray-700 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:border-blue-300"/>
        <button @onclick="SendMessage"
                class="block mt-2 bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-lg px-5 py-2.5 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40">
            Senden
        </button>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<Data.ChatMessage> messages = new List<Data.ChatMessage>();
    private string messageInput = string.Empty;
    private string userName = "User";
    private ElementReference messagesContainer;
    private bool shouldScroll = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.Closed += async (error) =>
        {
            Console.WriteLine("Hub connection closed.");
            if (error != null)
            {
                Console.WriteLine("Error: " + error.Message);
            }

            await Task.Delay(1000);
            await hubConnection.StartAsync();
        };

        hubConnection.On<ChatApp.Data.User, string>("ReceiveMessage", (user, message) =>
        {
            messages.Add(new Data.ChatMessage { User = user, Text = message, Timestamp = DateTime.Now });
            shouldScroll = true;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("Hub connection started. State: " + hubConnection.State);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error starting hub connection: " + ex.Message);
        }
    }

    private async Task SendMessage()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected && !string.IsNullOrWhiteSpace(messageInput))
        {
            var user = await GetUserByUsername(userName);
            if (user != null)
            {
                await hubConnection.SendAsync("SendMessage", user, messageInput);
                messageInput = string.Empty;
            }
        }
    }

    private async Task<User?> GetUserByUsername(string username)
    {
        // Implement the logic to get the user by username
        // This could be an API call or a database query
        return await Task.FromResult(new ChatApp.Data.User { Username = username });
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldScroll)
        {
            shouldScroll = false;
            await JS.InvokeVoidAsync("scrollToBottom", messagesContainer);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}