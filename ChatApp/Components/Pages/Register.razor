@page "/register"
@using ChatApp.Models
@using Microsoft.AspNetCore.Identity
@using Serilog
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-sm">
        <h2 class="text-2xl mt-10 text-center font-bold tracking-tight text-white">Register a new account</h2>
    </div>
    <div class="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="mb-4">
                <label for="email" class="block text-sm font-medium text-white">Email address</label>
                <InputText id="email" @bind-Value="registerModel.Email" placeholder="Email"
                           class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900"/>
            </div>
            <div class="mb-4">
                <label for="password" class="block text-sm font-medium text-white">Password</label>
                <InputText id="password" @bind-Value="registerModel.Password" type="password" placeholder="Password"
                           class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900"/>
            </div>
            <div class="mb-4">
                <label for="confirmPassword" class="block text-sm font-medium text-white">Confirm Password</label>
                <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" type="password" placeholder="Confirm Password"
                           class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900"/>
            </div>
            <button type="submit"
                    class="mt-6 w-full rounded-md bg-indigo-600 px-3 py-1.5 font-semibold text-white hover:bg-indigo-500">
                Register
            </button>
            @if (registrationErrors.Any())
            {
                <ul class="mt-4 text-red-500 text-sm">
                    @foreach (var err in registrationErrors)
                    {
                        <li>@err</li>
                    }
                </ul>
            }
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private List<string> registrationErrors = new List<string>();

    private async Task HandleRegister()
    {
        // Clear any previous errors
        registrationErrors.Clear();

        // Create a new user with the provided email
        var user = new ApplicationUser 
        { 
            UserName = registerModel.Email, 
            Email = registerModel.Email 
        };

        // Attempt to create the user
        var result = await UserManager.CreateAsync(user, registerModel.Password);

        if (result.Succeeded)
        {
            // Sign in the user, which sets the authentication cookie
            await SignInManager.SignInAsync(user, isPersistent: false);

            // Force a full page reload so that the HTTP context is new and headers can be set
            Navigation.NavigateTo("/", forceLoad: true);
        }
        else
        {
            // If creation failed, add each error to the list to display to the user
            foreach (var error in result.Errors)
            {
                registrationErrors.Add(error.Description);
            }
        }
    }

    public class RegisterModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }
}