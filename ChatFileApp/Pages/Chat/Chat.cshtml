@page "/chat/{chatId:int}"
@using ChatFileApp.Components.Chat
@using ChatFileApp.Data
@model ChatFileApp.Pages.Chat.ChatModel
@{
    ViewData["Title"] = "Chat";
}

<div class="flex h-screen">
    <component type="typeof(ChatContacts)"
               render-mode="Static"
               param-ActiveChatId="@Model.ChatId"/>
    <div class="mx-8 w-full flex flex-col flex-grow justify-between h-screen">
        <div class="messages flex flex-nowrap flex-col gap-4 overflow-y-scroll" style="max-height:100%;">
            @foreach (var message in Model.Messages)
            {
                <component type="@typeof(ChatMessage)"
                           render-mode="Static"
                           param-Username="@message.User.UserName"
                           param-Timestamp="message.SentAt"
                           param-Message="@message.Content"/>
            }
        </div>
        <div class="flex gap-6 w-full p-4">
            <input id="messageInput" type="text"
                   placeholder="Message to @Model.Conversation.Name"
                   class="block mt-2 w-full placeholder-gray-400/70 dark:placeholder-gray-500 rounded-lg border border-gray-200 bg-white px-5 py-2.5 text-gray-700 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:border-blue-300"/>
            <button id="sendButton"
                    class="block mt-2 px-10 bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-lg px-5 py-2.5 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40">
                Send
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Retrieve the chat Id from the model
        const chatId = '@Model.ChatId';
        // Build the SignalR connection. The query string parameter joins the client to its group.
        const connection = new signalR.HubConnectionBuilder()
            .withUrl('/chathub?chatId=' + chatId)
            .build();

        // When a message is received from the hub, append it to the messages list.
        connection.on('ReceiveMessage', (receivedChatId, username, sentAt, messageContent) => {
            if (receivedChatId != chatId) return;
            const messageContainer = document.querySelector('.messages');

            // Create the markup using the desired style
            const messageDiv = document.createElement('div');
            messageDiv.innerHTML = `<div class=\"flex items-start gap-2.5 p-2\">
        <img class=\"w-8 h-8 rounded-full\" src=\"https://placehold.co/600x600\" alt=\"Profile Picture\"/>
        <div class=\"flex flex-col w-full max-w-[320px] leading-1.5 p-4 border-gray-200 bg-gray-100 rounded-e-xl rounded-es-xl dark:bg-[#252837]\">
            <div class=\"flex items-center space-x-2 rtl:space-x-reverse\">
                <span class=\"text-sm font-semibold text-gray-900 dark:text-white\">${username}</span>
                <span class=\"text-sm font-normal text-gray-500 dark:text-gray-400\">${new Date(sentAt).toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit'
            })}</span>
            </div>
            <p class=\"text-sm font-normal py-2.5 text-gray-900 dark:text-white\">${messageContent}</p>
        </div>
    </div>`;

            messageContainer.appendChild(messageDiv);
            // Scroll to the bottom
            messageContainer.scrollTop = messageContainer.scrollHeight;
        });

        // Start the SignalR connection
        connection.start().catch(err => console.error(err));

        // Send button click event: send message via SignalR
        document.getElementById('sendButton').addEventListener('click', function () {
            const input = document.getElementById('messageInput');
            const message = input.value;
            if (message.trim() === '') return;
            connection.invoke('SendMessage', parseInt(chatId), message)
                .catch(err => console.error(err));
            input.value = '';
        });

        // Add keydown event listener to the message input field to send message on Enter key press.
        document.getElementById('messageInput').addEventListener('keydown', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                document.getElementById('sendButton').click();
            }
        });

        document.addEventListener('DOMContentLoaded', () => {
            const messageContainer = document.querySelector('.messages');
            window.scrollToBottom(messageContainer);
        });
    </script>
}