version: '3.9'

services:
  server1:
    build:
      context: .
      dockerfile: Server/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=postgres;Username=postgres;Password=FeK2olA9hIFHQiaeip3c2uHWm1YTNerTYCkKM3sptkFayUNxN7nvVqK7d2rqmTdn"
      Redis__Configuration: "redis:6379,abortConnect=false"
      ASPNETCORE_URLS: "http://+:8080"
      ReplicationPeers: "http://server2:5000,http://server3:5000"
    networks:
      verteiltesysteme:
        aliases:
          - server1
    depends_on:
      - postgres
      - redis

  server2:
    build:
      context: .
      dockerfile: Server/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=postgres;Username=postgres;Password=FeK2olA9hIFHQiaeip3c2uHWm1YTNerTYCkKM3sptkFayUNxN7nvVqK7d2rqmTdn"
      Redis__Configuration: "redis:6379,abortConnect=false"
      ASPNETCORE_URLS: "http://+:8080"
      ReplicationPeers: "http://server1:5000,http://server3:5000"
    networks:
      verteiltesysteme:
        aliases:
          - server2
    depends_on:
      - postgres
      - redis

  server3:
    build:
      context: .
      dockerfile: Server/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=postgres;Username=postgres;Password=FeK2olA9hIFHQiaeip3c2uHWm1YTNerTYCkKM3sptkFayUNxN7nvVqK7d2rqmTdn"
      Redis__Configuration: "redis:6379,abortConnect=false"
      ASPNETCORE_URLS: "http://+:8080"
      ReplicationPeers: "http://server1:5000,http://server2:5000"
    networks:
      verteiltesysteme:
        aliases:
          - server3
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: FeK2olA9hIFHQiaeip3c2uHWm1YTNerTYCkKM3sptkFayUNxN7nvVqK7d2rqmTdn
      POSTGRES_DB: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./server.sql:/docker-entrypoint-initdb.d/server.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  nginx:
    build:
      context: ./Nginx
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    depends_on:
      - server1
      - server2
      - server3

volumes:
  postgres-data:

networks:
  verteiltesysteme:
    driver: bridge